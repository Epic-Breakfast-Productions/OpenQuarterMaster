# This is a basic workflow to help you get started with Actions

name: Deployment - Repos

# Controls when the workflow will run
on:
  release:
    types: [published, edited, deleted]
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
defaults:
  run:
    working-directory: "utilities"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  # This workflow contains a single job called "build"
  deployToRepos:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          ref: update-repos-staging
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Install dependencies
        run: sudo apt-get install -y curl dpkg-dev

        # Runs a single command using the runners shell
      - name: Update Repo Files
        # TODO:: gpg key as secret
        run: ./update-repositories.sh
      - name: Commit new repo files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Updated Repositories after release
          branch: update-repos-staging
          create_branch: true
      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const pulls = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              head: context.ref,
              base: 'main',
              state: 'open',
            });
            
            if (pulls.data.length < 1) {
              await github.rest.pulls.create({
                title: '[Repos] Update repo files after release',
                owner: owner,
                repo: repo,
                head: context.ref,
                base: 'main',
                body: [
                  'This PR is auto-generated by',
                  '[actions/github-script](https://github.com/actions/github-script)',
                ].join('\n'),
              });
            } else {
              const existingPR = pulls.data[0];
              await github.rest.pulls.update({
                owner: owner,
                repo: repo,
                pull_number: existingPR.number,
                body: [
                  existingPR.body,
                  `Updated by Job ${context.job}`,
                ].join('\n'),
              });
            }

