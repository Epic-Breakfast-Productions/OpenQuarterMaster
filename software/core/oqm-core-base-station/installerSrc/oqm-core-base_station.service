# Service file for running an instance of the Open QuarterMaster Base Station.
#  Author: Greg Stewart
#  https://www.freedesktop.org/software/systemd/man/systemd.service.html
#
#  OQM Base Station tags: https://hub.docker.com/repository/docker/ebprod/open-qm-base-station/tags
#
[Unit]
Description=Open QuarterMaster Base Station server for Open Quartermaster. Version ${version}.
Documentation=https://github.com/Epic-Breakfast-Productions/OpenQuarterMaster/tree/main/software/open-qm-base-station
After=docker.service
Wants=network-online.target
Requires=docker.socket
Requires=oqm-core-api.service
After=oqm-core-api.service
Requires=oqm-infra-keycloak.service
After=oqm-infra-keycloak.service
Requires=oqm-infra-keycloak-client_watch.service
After=oqm-infra-keycloak-client_watch.service

[Service]
Type=simple
Restart=always
TimeoutSec=10m
# Setup operating variables
Environment="CONTAINER_NAME=oqm-core-base_station"
Environment="IMAGE_NAME=ebprod/oqm-core-base_station"
Environment="IMAGE_VERSION=${version}"
Environment="MAIN_CONFIG_FILE_TEMPLATE=/etc/oqm/serviceConfig/core/base+station/base-station-config.list"
Environment="MAIN_CONFIG_FILE=/tmp/oqm/serviceConfig/core/base+station/base-station-config.list"
Environment="USER_CONFIG_FILE_TEMPLATE=/etc/oqm/serviceConfig/core/base+station/user-config.list"
Environment="USER_CONFIG_FILE=/tmp/oqm/serviceConfig/core/base+station/user-config.list"

ExecStartPre=/bin/bash -c "oqm-captain container ensure-setup"
ExecStartPre=/bin/bash -c "oqm-captain certs ensure-system-present"
# Ensure previous runs gone
ExecStartPre=/bin/bash -c "/usr/bin/docker stop -t 10 $CONTAINER_NAME || echo 'Could not stop base station container'"
ExecStartPre=/bin/bash -c "/usr/bin/docker rm $CONTAINER_NAME || echo 'Could not remove base station container'"
ExecStartPre=/bin/bash -c "oqm-captain certs write-internal $CONTAINER_NAME /etc/oqm/serviceConfig/core/base+station/files/"

# Create filled out configuration
ExecStartPre=/bin/bash -c "mkdir -p /tmp/oqm/serviceConfig/core/base+station/"
ExecStartPre=/bin/bash -c "/usr/bin/oqm-config t $MAIN_CONFIG_FILE_TEMPLATE > $MAIN_CONFIG_FILE"
ExecStartPre=/bin/bash -c "chmod 600 $MAIN_CONFIG_FILE"
ExecStartPre=/bin/bash -c "/usr/bin/oqm-config t $USER_CONFIG_FILE_TEMPLATE > $USER_CONFIG_FILE"
ExecStartPre=/bin/bash -c "chmod 600 $USER_CONFIG_FILE"

# Pull image as separate task
ExecStartPre=/bin/bash -c "/usr/bin/docker pull $IMAGE_NAME:$IMAGE_VERSION || echo 'Could not pull image.'"
# Run Base Station
ExecStart=/bin/bash -c "/usr/bin/docker run --rm --name $CONTAINER_NAME \
                                        --network=oqm-internal \
                                        -v /etc/oqm/serviceConfig/core/base+station/files:/etc/oqm/serviceConfig/core/base+station/files:ro \
                                        --env-file /tmp/oqm/serviceConfig/core/base+station/base-station-config.list \
                                        --env-file /tmp/oqm/serviceConfig/core/base+station/user-config.list \
                                        --add-host $(oqm-config g system.hostname):host-gateway \
                                        $IMAGE_NAME:$IMAGE_VERSION"
# Ensure is up
ExecStartPost=/bin/bash -c "running=\"false\"; \
                            while [ \"$running\" != \"true\" ]; do \
                                status=\"$(docker container inspect -f '{{.State.Running}}' $CONTAINER_NAME 2> /dev/null)\"; \
                                if [ \"$status\" == \"true\" ]; then \
                                    echo \"Container running!\"; \
                                    running=\"true\"; \
                                    continue; \
                                fi; \
                                sleep 0.05s; \
                                if [ $SECONDS -gt 30 ]; then \
                                    echo \"Container not running after 30 seconds!\"; \
                                    exit 1; \
                                fi; \
                            done; \
                            "
ExecStartPost=/bin/bash -c "running=\"false\"; \
                            healthUri=\"$(oqm-config g core.baseStation.internalBaseUri)/q/health\"; \
                            while [ \"$running\" != \"true\" ]; do \
                                sleep 1s; \
                                status=\"$(docker container inspect -f '{{.State.Running}}' $CONTAINER_NAME)\"; \
                                if [ \"$status\" != \"true\" ]; then \
                                    echo \"Container was stopped!\"; \
                                    exit 1; \
                                fi; \
                                hcGet=\"$(docker run --rm --name $CONTAINER_NAME-hc --network=oqm-internal docker.io/curlimages/curl:latest $healthUri -k)\"; \
                                echo \"Health check get to $healthUri : $hcGet\"; \
                                status=\"$(jq --argjson hcGet \"$hcGet\" -nr '$hcGet.status')\"; \
                                echo \"Status: $status\"; \
                                if [ \"$status\" = \"UP\" ]; then \
                                    echo \"Base Station running and available!\"; \
                                    running=\"true\"; \
                                fi \
                            done \
                            "
# Remove from docker
ExecStop=/bin/bash -c "/usr/bin/docker stop -t 10 $CONTAINER_NAME || echo 'Could not stop base station container'"
ExecStopPost=/bin/bash -c "/usr/bin/docker rm $CONTAINER_NAME || echo 'Could not remove base station container'"

[Install]
WantedBy=multi-user.target
