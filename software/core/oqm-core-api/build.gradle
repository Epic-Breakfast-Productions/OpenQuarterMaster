plugins {
	id 'java'
	id 'io.quarkus'
	id "io.freefair.lombok" version "8.14.2"
	id 'org.cyclonedx.bom' version '2.3.1'
	id("org.spdx.sbom") version "0.9.0"
}

group 'com.ebp.openQuarterMaster'
version '3.2.1'

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
	implementation 'io.quarkus:quarkus-config-yaml'
	implementation 'io.quarkus:quarkus-mongodb-client'
	implementation 'io.quarkus:quarkus-messaging-kafka'
	implementation 'io.quarkus:quarkus-rest'
	implementation 'io.quarkus:quarkus-rest-jackson'
	implementation 'io.quarkus:quarkus-smallrye-openapi'
	implementation 'io.quarkus:quarkus-smallrye-health'
	implementation 'io.quarkus:quarkus-opentelemetry'
	implementation 'io.quarkus:quarkus-hibernate-validator'
	implementation 'io.quarkus:quarkus-container-image-docker'
	implementation 'io.quarkus:quarkus-scheduler'
	// for jwt auth
	implementation 'io.quarkus:quarkus-smallrye-jwt'
	// for basic auth
	implementation 'io.quarkus:quarkus-elytron-security'
	implementation 'io.quarkus:quarkus-elytron-security-properties-file'

	//implementation 'io.opentelemetry.instrumentation:opentelemetry-mongo-3.1:1.24.0-alpha'
	// https://quarkus.io/guides/logging
	implementation 'org.jboss.slf4j:slf4j-jboss-logmanager'

	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.module:jackson-module-blackbird'

	// https://mvnrepository.com/artifact/tech.units/indriya
	//     https://unitsofmeasurement.gitbook.io/uom-guide/getting-started/getting-started-with-indriya
	implementation 'tech.units:indriya:2.2.3'
	implementation 'systems.uom:systems-common:2.2'
	// https://mvnrepository.com/artifact/tech.uom.lib/uom-lib-jackson
	implementation 'tech.uom.lib:uom-lib-jackson:2.1'

	implementation 'org.apache.commons:commons-lang3:3.18.0'
	implementation 'org.apache.commons:commons-compress:1.28.0'
	implementation 'org.apache.commons:commons-io:1.3.2'
	implementation("commons-validator:commons-validator:1.10.0")
	implementation 'org.apache.tika:tika-core:3.2.2'
	implementation 'uk.org.okapibarcode:okapibarcode:0.5.2'

	/*
	Test Dependencies
	 */
	testImplementation group: 'io.quarkus', name: 'quarkus-junit5'
	testImplementation group: 'io.quarkus', name: 'quarkus-jacoco' // https://quarkus.io/guides/tests-with-coverage
	testImplementation group: 'io.rest-assured', name: 'rest-assured'
	testImplementation 'io.quarkus:quarkus-smallrye-jwt-build'
	testImplementation 'io.quarkus:quarkus-test-kafka-companion'
	testImplementation 'net.datafaker:datafaker:2.4.4'
	testImplementation 'org.assertj:assertj-core:3.27.4'
}

java {
	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(21))
		}
	}
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

test {
	minHeapSize = "128m" // initial heap size
	maxHeapSize = "2g" // maximum heap size
	jvmArgs(
		"--add-opens", "java.base/java.lang=ALL-UNNAMED",
		"--add-opens", "java.base/java.io=ALL-UNNAMED",
		"--add-opens", "java.base/java.util=ALL-UNNAMED",
		"--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED"
	)
	testLogging.showStandardStreams = true
}

// https://github.com/CycloneDX/cyclonedx-gradle-plugin
cyclonedxBom {
	// includeConfigs is the list of configuration names to include when generating the BOM (leave empty to include every configuration), regex is supported
	includeConfigs = ["runtimeClasspath"]

	// skipConfigs is a list of configuration names to exclude when generating the BOM, regex is supported
	skipConfigs = ["compileClasspath", "testCompileClasspath"]

	// skipProjects is a list of project names to exclude when generating the BOM
//	skipProjects = [rootProject.name, "yourTestSubProject"]

	// Specified the type of project being built. Defaults to 'library'
	projectType = "application"
	// Specified the version of the CycloneDX specification to use. Defaults to '1.6'
	schemaVersion = "1.6"
	// Boms destination directory. Defaults to 'build/reports'
	destination = file("build/reports")
	// The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
	outputName = "${project.name}-sbom-cyclonedx"
	// The file format generated, can be xml, json or all for generating both. Defaults to 'all'
	outputFormat = "all"
	// Include BOM Serial Number. Defaults to 'true'
	includeBomSerialNumber = true
	// Include License Text. Defaults to 'true'
	includeLicenseText = false
	// Include resolution of full metadata for components including licenses. Defaults to 'true'
	includeMetadataResolution = true
	// Attempt to include the build-system URL by reading environment variables from common CI system such as GitHub Actions, GitLab CI, Drone, Jenkins, Travis CI, and Circle CI. Defaults to 'false'
	includeBuildSystem = true
	// if includeBuildSystem is true, the given environment variables will be used to construct the build-system URL that will be included in the BOM. The dollar sign and curly braces (e.g. `${NAME}`) are required to specify an environment variable. Optional, defaults to `null`.
	buildSystemEnvironmentVariable = '${CUSTOM_CI_URL}/jobs/${CUSTOM_JOB_ID}'
	// Override component version. Defaults to the project version
//	componentVersion = "2.0.0"
	// Override component name. Defaults to the project name
//	componentName = "my-component"
}

// https://github.com/spdx/spdx-gradle-plugin
spdxSbom {
	targets {
		// create a target named "release",
		// this is used for the task name (spdxSbomForRelease)
		// and output file (release.spdx.json)

		create("release") {
			outputFile.set(layout.buildDirectory.file("reports/${project.name}-sbom-spdx.json"))
			document {
//				name.set("my spdx document")
			}
		}
	}
}

tasks.register('generateSbom'){
	dependsOn tasks.cyclonedxBom
	dependsOn tasks.spdxSbom
	doLast {
		println "Finished writing sboms."
	}
}

/**
 * Used to print the current version of this project.
 *
 * Used by the `makeInstallers.sh` script to get the version.
 */
tasks.register('printVersion') {
	doLast {
		println project.version
	}
}

